name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write

jobs:
  is_release:
    name: Is release?
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.version.outputs.release }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        id: pnpm-install
        with:
          version: 9.5

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Configure pnpm
        run: |
          pnpm config set auto-install-peers true
          pnpm config set exclude-links-from-lockfile true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check if new version
        id: version
        run: |
          IS_RELEASE=$(./.github/scripts/is_release.sh)
          echo "release=$IS_RELEASE" >> "$GITHUB_OUTPUT"

  changes:
    name: Repository changes
    needs: [is_release]
    if: needs.is_release.outputs.release == 'true'
    runs-on: ubuntu-latest
    outputs:
      js-sdk: ${{ steps.js.outputs.release }}
      python-sdk: ${{ steps.python.outputs.release }}
      cli: ${{ steps.cli.outputs.release }}
      charts: ${{ steps.charts.outputs.release }}
      template: ${{ steps.template.outputs.release }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        id: pnpm-install
        with:
          version: 9.5

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Configure pnpm
        run: |
          pnpm config set auto-install-peers true
          pnpm config set exclude-links-from-lockfile true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check JavasScript SDK Release
        id: js
        run: |
          IS_RELEASE=$(./.github/scripts/is_release_for_package.sh "e2b")
          echo "release=$IS_RELEASE" >> "$GITHUB_OUTPUT"

      - name: Check Python SDK Release
        id: python
        run: |
          IS_RELEASE=$(./.github/scripts/is_release_for_package.sh "@e2b/python-sdk")
          echo "release=$IS_RELEASE" >> "$GITHUB_OUTPUT"

      - name: Check CLI Release
        id: cli
        run: |
          IS_RELEASE=$(./.github/scripts/is_release_for_package.sh "@e2b/cli")
          echo "release=$IS_RELEASE" >> "$GITHUB_OUTPUT"

      - name: Check Charts SDK Release
        id: charts
        run: |
          IS_RELEASE=$(./.github/scripts/is_release_for_package.sh "@e2b/data-extractor")
          echo "release=$IS_RELEASE" >> "$GITHUB_OUTPUT"

      - name: Check Template SDK Release
        id: template
        run: |
          IS_RELEASE=$(./.github/scripts/is_release_for_package.sh "@e2b/code-interpreter-template")
          echo "release=$IS_RELEASE" >> "$GITHUB_OUTPUT"

  python-tests:
    name: Python SDK Tests
    needs: [changes]
    if: needs.changes.outputs.python-sdk == 'true'
    uses: ./.github/workflows/python_sdk_tests.yml
    secrets: inherit

  js-tests:
    name: JS SDK Tests
    needs: [changes]
    if: needs.changes.outputs.js-sdk == 'true'
    uses: ./.github/workflows/js_sdk_tests.yml
    secrets: inherit

  cli-tests:
    name: CLI Tests
    needs: [changes]
    if: needs.changes.outputs.cli == 'true'
    uses: ./.github/workflows/cli_tests.yml
    secrets: inherit

  charts-release:
    name: Charts release
    if: needs.changes.outputs.charts == 'true'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.output_version.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        id: pnpm-install
        with:
          version: 9.5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Configure pnpm
        run: |
          pnpm config set auto-install-peers true
          pnpm config set exclude-links-from-lockfile true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create new versions
        run: pnpm run version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release new versions
        run: |
          poetry build
          poetry config pypi-token.pypi ${PYPI_TOKEN}
          poetry publish --skip-existing
        working-directory:  ./packages/chart_data_extractor
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.CHARTS_PYPI_TOKEN }}

      - name: Output new version
        id: output_version
        working-directory: ./packages/chart_data_extractor
        run: |
            echo "::set-output name=version::$(pnpm pkg get version --workspaces=false | tr -d \\")"

  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [changes, charts-release]
    if: always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      (needs.changes.outputs.template == 'true' || needs.changes.outputs.charts == 'true')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set package version
        working-directory: ./packages/template
        run: |
          if [ -z "${{ needs.charts-release.outputs.version }}" ]; then
            VERSION=$(cat ../chart_data_extractor/pyproject.toml | grep version | cut -d '"' -f 2)
          else
            VERSION=${{ needs.charts-release.outputs.version }}
          fi
          echo "Version: $VERSION"

          sed -i "s/e2b_charts/e2b_charts==${VERSION}/g" requirements.txt

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./packages/template
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/code-interpreter:latest

  build-template:
    name: Build E2B template
    runs-on: ubuntu-latest
    needs: [build-docker-image]
    if: always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      (needs.changes.outputs.template == 'true' || needs.changes.outputs.charts == 'true')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install E2B CLI
        run: npm install -g @e2b/cli

      - name: Build e2b
        run: e2b template build
        working-directory: ./packages/template
        env:
          E2B_ACCESS_TOKEN: ${{ secrets.E2B_ACCESS_TOKEN }}

  publish:
    name: Publish
    needs: [is_release, python-tests, js-tests, cli-tests, build-template]
    if: (!cancelled()) && !contains(needs.*.result, 'failure') && needs.is_release.outputs.release == 'true'
    uses: ./.github/workflows/publish_packages.yml
    secrets: inherit

  report-failure:
    needs: [publish]
    if: failure()
    name: Release Failed - Slack Notification
    runs-on: ubuntu-latest
    steps:
      - name: Release Failed - Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: "#ff0000"
          SLACK_MESSAGE: ":here-we-go-again: :bob-the-destroyer: We need :fix-parrot: ASAP :pray:"
          SLACK_TITLE: Release Failed
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: "monitoring-releases"
